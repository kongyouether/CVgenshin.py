# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CVtest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys, cv2, time, threading  # 导入系统模块,OpenCV模块
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton,QDesktopWidget # 导入PyQt5模块
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.Qt import *
import numpy as np
import random


class Ui_CVtest(QWidget):
    def __init__(self):  # * 初始化函数
        super().__init__()
        screen = QDesktopWidget().screenGeometry()
        # self.setWindowFlags(Qt.FramelessWindowHint)  # 设置窗口标志：隐藏窗口边框
        # self.setWindowOpacity(0.8)  # 设置窗口不透明度：0.8（值越大越不透明）
        self.move(int((screen.width() - 900) / 2), int((screen.height() - 1000) / 2))
        self.background()

        self.setupUi(self)


    def setupUi(self, CVtest):
        CVtest.setObjectName("CVtest")
        CVtest.resize(894, 800)
        CVtest.setMinimumSize(QtCore.QSize(1200, 1200))
        CVtest.setMaximumSize(QtCore.QSize(1400, 1400))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        CVtest.setFont(font)
        self.gridLayout = QtWidgets.QGridLayout(CVtest)
        self.gridLayout.setObjectName("gridLayout")
        self.line = QtWidgets.QFrame(CVtest)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 1, 0, 1, 3)
        spacerItem = QtWidgets.QSpacerItem(20, 29, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 2, 1, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(CVtest)
        self.label.setEnabled(True)
        self.label.setMinimumSize(QtCore.QSize(0, 30))
        self.label.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.horizontalSlider = QtWidgets.QSlider(CVtest)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(0, 30))
        self.horizontalSlider.setMaximumSize(QtCore.QSize(16777215, 30))
        self.horizontalSlider.setMaximum(10)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout_2.addWidget(self.horizontalSlider)
        self.horizontalSlider.valueChanged.connect(self.valueChange)
        self.label_number = QtWidgets.QLabel(CVtest)
        font = QtGui.QFont()
        font.setFamily("得意黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_number.setFont(font)
        self.label_number.setAlignment(QtCore.Qt.AlignCenter)
        self.label_number.setObjectName("label_number")
        self.horizontalLayout_2.addWidget(self.label_number)
        self.pushButton = QtWidgets.QPushButton(CVtest)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.generate_point)
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 1, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(CVtest)
        self.graphicsView.setEnabled(True)
        self.graphicsView.setMinimumSize(QtCore.QSize(1000, 1000))
        self.graphicsView.setMaximumSize(QtCore.QSize(1000, 1000))
        self.graphicsView.setMouseTracking(True)
        self.graphicsView.setAlignment(QtCore.Qt.AlignCenter)
        self.graphicsView.setObjectName("graphicsView")

        # graphicsView展示图片white.png
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap("white.png"))
        self.graphicsView.setScene(self.scene)
        self.gridLayout.addWidget(self.graphicsView, 5, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(179, 671, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 5, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(179, 697, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 5, 2, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.line_2 = QtWidgets.QFrame(CVtest)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout.addWidget(self.line_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        self.pushButton_3 = QtWidgets.QPushButton(CVtest)
        self.pushButton_3.setMinimumSize(QtCore.QSize(150, 0))
        self.pushButton_3.setMaximumSize(QtCore.QSize(150, 16777215))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.spin)
        # 禁用旋转按钮
        self.pushButton_3.setEnabled(False)
        self.horizontalLayout.addWidget(self.pushButton_3)
        spacerItem5 = QtWidgets.QSpacerItem(200, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.pushButton_2 = QtWidgets.QPushButton(CVtest)
        self.pushButton_2.setMinimumSize(QtCore.QSize(150, 0))
        self.pushButton_2.setMaximumSize(QtCore.QSize(150, 16777215))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.perspective_transform)
        # 禁用透视变换按钮
        self.pushButton_2.setEnabled(False)
        self.horizontalLayout.addWidget(self.pushButton_2)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout.addLayout(self.verticalLayout, 6, 0, 1, 3)
        self.label.setBuddy(self.horizontalSlider)

        self.retranslateUi(CVtest)
        QtCore.QMetaObject.connectSlotsByName(CVtest)
        self.show()

    def retranslateUi(self, CVtest):
        _translate = QtCore.QCoreApplication.translate
        CVtest.setWindowTitle(_translate("CVtest", "CV原神"))
        CVtest.setWindowIcon(QIcon("./hutao.ico"))  # 设置窗口图标
        self.label.setText(_translate("CVtest", "圆点数量："))
        self.label_number.setText(_translate("CVtest", "0"))
        self.pushButton.setText(_translate("CVtest", "生成"))
        self.pushButton_3.setText(_translate("CVtest", "旋转变换"))
        self.pushButton_2.setText(_translate("CVtest", "透视变换"))

    def valueChange(self):
        global number
        number = self.horizontalSlider.value()
        # print("number:", number)
        self.label_number.setText(str(number))

    def background(self):
        global img
        img = np.zeros((1400, 1400, 3), np.uint8)
        img.fill(255)
        # 在图片的四角生成定位点
        img[100:200, 100:200] = [0, 0, 0]
        img[100:200, 1200:1300] = [0, 0, 0]
        img[1200:1300, 100:200] = [0, 0, 0]
        img[1200:1300, 1200:1300] = [0, 0, 0]

        img[115:185, 115:185] = [255, 255, 255]
        img[115:185, 1215:1285] = [255, 255, 255]
        img[1215:1285, 115:185] = [255, 255, 255]
        img[1215:1285, 1215:1285] = [255, 255, 255]

        img[130:170, 130:170] = [0, 0, 0]
        img[130:170, 1230:1270] = [0, 0, 0]
        img[1230:1270, 130:170] = [0, 0, 0]
        img[1230:1270, 1230:1270] = [0, 0, 0]

        # 在图片中心生成一个800*800的黑色区域
        img[290:1110, 290:1110] = [0, 0, 0]

        # 在图片中生成64个白色方块，每个方块大小为80*80，间隔为20
        for i in range(8):
            for j in range(8):
                img[310 + i * 100: 390 + i * 100, 310 + j * 100: 390 + j * 100] = [255, 255, 255]

        img[310 : 390 , 310 : 390] = [255, 0, 0]

        # 在图片中生成1-8，a-h的标识
        font = cv2.FONT_HERSHEY_SIMPLEX
        for i in range(9):
            # 如果i = 8，就分别写x和y
            if i == 8:
                cv2.putText(img, 'x', (310 + i * 100 + 30, 280), font, 2, (180, 0, 0), 6)
                cv2.putText(img, 'y', (260, 330 + i * 100 + 30), font, 2, (0, 0, 180), 6)
            else:
                cv2.putText(img, str(i + 1), (310 + i * 100 + 30, 280), font, 1, (0, 0, 0), 2)
                cv2.putText(img, str(i + 1), (260, 330 + i * 100 + 30), font, 1, (0, 0, 0), 2)
        img = cv2.resize(img, (700, 700), interpolation=cv2.INTER_CUBIC)
        img900 = cv2.resize(img, (900, 900), interpolation=cv2.INTER_CUBIC)
        cv2.imwrite("white.png", img900)

    def generate_point(self):
        global img, number, gene_img
        gene_img = img.copy()
        # 在图片中生成number个随机圆点
        # 生成数组记录已经生成的圆点的位置
        # 生成随机数，如果随机数已经在数组中，就重新生成
        # 如果随机数不在数组中，就将随机数加入数组
        point_list = []
        for i in range(number):
            while True:
                x = random.randint(0, 7)
                y = random.randint(0, 7)
                if [x, y] not in point_list:
                    point_list.append([x, y])
                    cv2.circle(gene_img, (175 + 50 * x, 175 + 50 * y), 12, (0, 0, 0), -1)
                    break

        # print("x = ", xx + 1, "y = ", yy + 1)
        # cv2.circle(img, (350 + 100 * xx, 350 + 100 * yy), 25, (0, 0, 0), -1)
        # cv2.imshow('image', img)
        # 将生成的图片缩放到900*900
        gene_img = cv2.resize(gene_img, (900, 900), interpolation=cv2.INTER_CUBIC)
        cv2.imwrite('test.png', gene_img)
        # 将生成的图片展示在graphicsView中
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap("test.png"))
        self.graphicsView.setScene(self.scene)
        self.pushButton_3.setEnabled(True) # 启用旋转按钮
        self.pushButton_2.setEnabled(True)# 启用透视变换按钮


    def spin(self):
        global gene_img
        spin_img = gene_img.copy()
        # 打印图片的宽和高
        # print(spin_img.shape)

        # 将spin_img旋转20度
        rows, cols, ch = spin_img.shape
        # angle为-30到30之间的非零随机数
        angle = random.randint(-180, 180)
        print("angle:", angle)

        length = int(cols * abs(np.sin(abs(angle) * np.pi / 180)) + rows * abs(np.cos(abs(angle) * np.pi / 180)))
        # print("length:", length)

        M = cv2.getRotationMatrix2D((cols / 2, rows / 2), angle, 1)  # 获得旋转矩阵
        M[0, 2] += (length - cols) / 2
        M[1, 2] += (length - rows) / 2
        spin_img = cv2.warpAffine(spin_img, M, (length, length), borderValue=(255, 255, 255))  # 仿射变换旋转图像
        # 将四周的黑色区域变成白色

        spin_img = cv2.resize(spin_img, (900, 900), interpolation=cv2.INTER_CUBIC)# 把spin_img缩放到700*700
        cv2.imwrite('spin.png', spin_img)

        # cv2.imwrite('spin.png', spin_img)
        # 将生成的图片展示在graphicsView中
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap("spin.png"))
        self.graphicsView.setScene(self.scene)


        


    def perspective_transform(self):
        global gene_img
        perspective_img = gene_img.copy()
        turn = random.randint(0,3)
        if turn == 1: # 逆时针旋转90度
            perspective_img = cv2.rotate(perspective_img, cv2.ROTATE_90_COUNTERCLOCKWISE)
        elif turn == 2: # 逆时针旋转180度
            perspective_img = cv2.rotate(perspective_img, cv2.ROTATE_180)
        elif turn == 3: # 逆时针旋转270度
            perspective_img = cv2.rotate(perspective_img, cv2.ROTATE_90_CLOCKWISE)

        source = np.float32([[0, 0], [0, 900], [900, 0], [900, 900]])
        x1,y1 = random.randint(0, 150), random.randint(0, 150)
        x2,y2 = random.randint(0, 150), random.randint(750, 900)
        x3 = 900 - x2
        y3 = 900 - y2
        x4 = 900 - x1
        y4 = 900 - y1
        destination = np.float32([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])
        M = cv2.getPerspectiveTransform(source, destination)
        perspective_img = cv2.warpPerspective(perspective_img, M, (900, 900), borderValue=(255, 255, 255))
        cv2.imwrite('perspective.png', perspective_img)
        # 将生成的图片展示在graphicsView中
        self.scene = QtWidgets.QGraphicsScene()
        self.scene.addPixmap(QtGui.QPixmap("perspective.png"))
        self.graphicsView.setScene(self.scene)





if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Ui_CVtest()
    sys.exit(app.exec_())